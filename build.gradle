//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id("java")
    id("fabric-loom") version("1.6-SNAPSHOT")
    id("maven-publish")
    id("org.jetbrains.kotlin.jvm") version("1.9.23")
    id("org.jetbrains.kotlin.plugin.serialization") version("1.9.23")
    id("com.diffplug.spotless") version("6.25.0")
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    // If jitpack is taking ages to build or not working properly, comment it out, go build the latest commit of StarlitUtils and rely on mavenLocal()
    mavenLocal()
    mavenCentral()
    maven { url = "https://maven.impactdev.net/repository/development/" }
    maven { url = "https://maven.nucleoid.xyz/" }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = "https://jitpack.io" }

}

dependencies {
//  Mandatory
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
    modImplementation("net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}")
    modImplementation("net.kyori:adventure-platform-fabric:${project.adventure_platform_fabric_version}")
    modImplementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3")
    modImplementation("com.github.StarlitMC:StarlitUtils:-SNAPSHOT")

//    If you need cobblemon:
//    modImplementation("com.cobblemon:fabric:${project.cobblemon_version}")

//    If you need commands:
    modImplementation("net.silkmc:silk-core:${project.silk_version}")
    modImplementation("net.silkmc:silk-commands:${project.silk_version}")

//    If you need deprecated stuff that you dont have time to find an alternative for:
//    modImplementation("net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}")

//    If you need a gui:
//    modImplementation(include("eu.pb4:sgui:${project.sgui_version}"))
}

spotless {
    kotlin {
        ktfmt('0.30').dropboxStyle()
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

tasks.withType(KotlinCompile).configureEach {
    compilerOptions.jvmTarget.set(JvmTarget.JVM_17)
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}